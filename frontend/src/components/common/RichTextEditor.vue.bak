<template>
  <div class="rich-text-editor" :class="{ 'is-disabled': disabled }">
    <div v-if="editor && showToolbar" class="editor-toolbar">
      <el-button-group>
        <el-button @click="editor.chain().focus().toggleBold().run()"
                   :type="editor.isActive('bold') ? 'primary' : 'default'" text bg size="small" :disabled="disabled">
          <span style="font-weight: bold">B</span>
        </el-button>
        <el-button @click="editor.chain().focus().toggleItalic().run()"
                   :type="editor.isActive('italic') ? 'primary' : 'default'" text bg size="small" :disabled="disabled">
          <el-icon>
            I
          </el-icon>
        </el-button>
        <el-button @click="editor.chain().focus().toggleStrike().run()"
                   :type="editor.isActive('strike') ? 'primary' : 'default'" text bg size="small" :disabled="disabled">
          <el-icon>
            <DCaret/>
          </el-icon> <!-- Placeholder icon -->
        </el-button>
        <el-button @click="editor.chain().focus().setParagraph().run()"
                   :type="editor.isActive('paragraph') ? 'primary' : 'default'" text bg size="small"
                   :disabled="disabled">
          P
        </el-button>
        <el-button @click="editor.chain().focus().toggleHeading({ level: 3 }).run()"
                   :type="editor.isActive('heading', { level: 3 }) ? 'primary' : 'default'" text bg size="small"
                   :disabled="disabled">
          H3
        </el-button>
        <el-button @click="editor.chain().focus().toggleBulletList().run()"
                   :type="editor.isActive('bulletList') ? 'primary' : 'default'" text bg size="small"
                   :disabled="disabled">
          <el-icon>
            <List/>
          </el-icon>
        </el-button>
        <el-button @click="editor.chain().focus().toggleOrderedList().run()"
                   :type="editor.isActive('orderedList') ? 'primary' : 'default'" text bg size="small"
                   :disabled="disabled">
          <!-- Placeholder Icon for Ordered List --> Ol
        </el-button>
        <!-- Add more buttons as needed: undo, redo, blockquote, codeblock etc. -->
        <el-button @click="editor.chain().focus().undo().run()" text bg size="small"
                   :disabled="!editor.can().undo() || disabled">
          <el-icon>
            <RefreshLeft/>
          </el-icon>
        </el-button>
        <el-button @click="editor.chain().focus().redo().run()" text bg size="small"
                   :disabled="!editor.can().redo() || disabled">
          <el-icon>
            <RefreshRight/>
          </el-icon>
        </el-button>

      </el-button-group>
    </div>
    <editor-content :editor="editor" class="editor-content-area"/>
  </div>
</template>

<script setup>
import {ref, watch, onMounted, onBeforeUnmount, defineProps, defineEmits} from 'vue';
import {Editor, EditorContent} from '@tiptap/vue-3';
import StarterKit from '@tiptap/starter-kit';
// Optional: Add more extensions like Placeholder, Link, Image etc.
// import Placeholder from '@tiptap/extension-placeholder'

import {ElButtonGroup, ElButton, ElIcon} from 'element-plus';
// Import specific icons used in the toolbar
import {Bowl, Bottom, DCaret, List, RefreshLeft, RefreshRight} from '@element-plus/icons-vue';


// Props definition
const props = defineProps({
  modelValue: {
    type: String,
    default: '',
  },
  placeholder: {
    type: String,
    default: '开始输入...'
  },
  showToolbar: {
    type: Boolean,
    default: true,
  },
  disabled: { // To disable editing
    type: Boolean,
    default: false
  }
});

// Emits definition
const emit = defineEmits(['update:modelValue', 'blur', 'focus']);

// --- Refs ---
const editor = ref(null);

const formatText = (text) => {
  if (!text) {
    return '';
  }
  // 使用正则表达式全局替换 \n 为 <br>
  // 注意：要确保 HardBreak 扩展已启用，否则 <br> 可能被过滤掉
  return text.replace(/\n/g, '<br>');
};

// --- Methods ---
const setupEditor = () => {
  editor.value = new Editor({
    content: formatText(props.modelValue),
    editable: !props.disabled,
    extensions: [
      StarterKit.configure({
        // Configure StarterKit options if needed
        // heading: { levels: [1, 2, 3], }, // Example
        // paragraph: {},
      }),
      // Placeholder.configure({
      //    placeholder: props.placeholder,
      // })
    ],
    onUpdate: () => {
      // HTML content
      // emit('update:modelValue', editor.value.getHTML());
      // JSON content (more structured, potentially better for storage)
      // emit('update:modelValue', editor.value.getJSON());

      // Emit HTML for simplicity with v-model expecting string
      // emit('update:modelValue', editor.value.getHTML());
      emit('update:modelValue', editor.value.getText());
    },
    onFocus: ({event}) => {
      emit('focus', event);
    },
    onBlur: ({event}) => {
      emit('blur', event);
    },
  });
}

// --- Watchers ---
// Watch for external changes to modelValue
watch(() => props.modelValue, (newValue) => {
  // Check if the editor content is already the same to avoid unnecessary updates and cursor jumps
  const isSame = editor.value && (editor.value.getHTML() === newValue);
  if (isSame) {
    return;
  }
  if (editor.value) {
    // Use setContent to update the editor content
    editor.value.commands.setContent(newValue || '', false); // false prevents emitting update event
  }
});

// Watch for changes in the disabled state
watch(() => props.disabled, (isDisabled) => {
  if (editor.value) {
    editor.value.setEditable(!isDisabled);
  }
});


// --- Lifecycle Hooks ---
onMounted(() => {
  setupEditor();
});

onBeforeUnmount(() => {
  if (editor.value) {
    editor.value.destroy();
  }
});

</script>

<style>
/* Basic Tiptap styling (you might want to scope or customize further) */
.rich-text-editor {
  border: 1px solid var(--el-border-color);
  border-radius: 4px;
  background-color: #fff;
  display: flex;
  flex-direction: column;
  transition: border-color 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);
}

.rich-text-editor.is-disabled {
  background-color: var(--el-disabled-bg-color);
  border-color: var(--el-disabled-border-color);
  cursor: not-allowed;
}

.rich-text-editor.is-disabled .ProseMirror {
  cursor: not-allowed;
}

.rich-text-editor:focus-within {
  border-color: var(--el-color-primary);
}


.editor-toolbar {
  padding: 5px 8px;
  border-bottom: 1px solid var(--el-border-color-light);
  flex-shrink: 0; /* Prevent toolbar from shrinking */
  background-color: #f9f9f9; /* Slight background for toolbar */
  border-top-left-radius: 3px; /* Match outer radius */
  border-top-right-radius: 3px;
}

.editor-toolbar .el-button-group {
  display: flex;
  flex-wrap: wrap; /* Allow buttons to wrap on smaller screens */
  gap: 2px;
}

.editor-toolbar .el-button {
  /* padding: 4px 8px; */ /* Adjust button padding */
}

.editor-content-area {
  padding: 10px 12px;
  flex-grow: 1; /* Allow content area to grow */
  overflow-y: auto; /* Add scroll if content exceeds height */
  min-height: 100px; /* Minimum editing area height */
  max-height: 400px; /* Maximum height before scrolling */
}

/* Tiptap's default editor styles */
.ProseMirror {
  outline: none; /* Remove default focus outline */
  line-height: 1.6;
  word-wrap: break-word;
  white-space: pre-wrap;
  /* Add more base styles for paragraphs, headings, lists etc. */
}

.ProseMirror p {
  margin-bottom: 0.8em;
}

.ProseMirror p:last-child {
  margin-bottom: 0;
}

.ProseMirror h1, .ProseMirror h2, .ProseMirror h3, .ProseMirror h4, .ProseMirror h5, .ProseMirror h6 {
  line-height: 1.2;
  margin-bottom: 0.5em;
  margin-top: 1em;
  font-weight: 600;
}

.ProseMirror h3 {
  font-size: 1.15em;
}

.ProseMirror ul, .ProseMirror ol {
  padding-left: 1.5em;
  margin-bottom: 0.8em;
}

.ProseMirror blockquote {
  border-left: 3px solid var(--el-border-color);
  margin-left: 0;
  margin-right: 0;
  padding-left: 1em;
  color: var(--el-text-color-secondary);
}

.ProseMirror pre {
  background: #0D0D0D;
  color: #FFF;
  font-family: 'JetBrainsMono', monospace;
  padding: 0.75rem 1rem;
  border-radius: 0.5rem;
  margin-bottom: 0.8em;
}

.ProseMirror code {
  background-color: rgba(97, 97, 97, 0.1);
  border-radius: 0.25em;
  box-decoration-break: clone;
  color: #616161;
  font-size: 0.9rem;
  padding: 0.2em 0.4em;
}

/* --- Placeholder styling (if using Placeholder extension) --- */
/*
.ProseMirror p.is-editor-empty:first-child::before {
  color: #adb5bd;
  content: attr(data-placeholder);
  float: left;
  height: 0;
  pointer-events: none;
}
*/

</style>